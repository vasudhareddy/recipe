@diagram
Explain the end-to-end workflow for user registration in this Spring Boot app, from REST controller to service, entity validation, repository save, and response mapping—keep it simple for a new developer.

@diagram
Generate a runtime diagram of the /api/orders POST endpoint in my Spring Boot app, including request mapping, DTO → entity conversion, service logic, repository calls, and returned status codes.

@diagram
Trace the execution path for OrderService.placeOrder(...) called by OrderController when /api/orders is hit, including RestTemplate/WebClient calls, transactions, exceptions, and all SQL generated by Hibernate.

@diagram
Compare the behavior of /api/payments before and after my latest commit. Highlight changes in controller method signatures, service logic branches, repository queries, and external API calls.

@diagram
Show a dependency diagram for the packages: com.example.order.controller, service, repository, config. Highlight any cyclic dependencies or controllers calling repositories directly (skipping services).

@diagram
Visualize the data flow of personally identifiable information (email, phone) in the Spring Security filter chain and downstream layers. Show where it enters the app, which services/repositories touch it, and any outbound calls.

@diagram
For the test OrderControllerIT.shouldCreateOrder(), show which Spring MVC controller, service, repository methods, and SQL statements were executed. Highlight code paths not covered by this test.

@diagram
Illustrate how this Spring Boot repo uses AppMap in VS Code and CI: test execution → appmap.json creation → PR visualization in GitHub. Show where AppMap hooks in during Maven/Gradle test runs.

@diagram
Create a shareable architecture map of the Order microservice: incoming REST endpoints, security filters, controllers, services, repositories, JPA entities, messaging (RabbitMQ/Kafka) producers/consumers, and outbound HTTP clients (Feign/WebClient).

@diagram
Show transaction boundaries for OrderService methods annotated with @Transactional and the queries they wrap. Include nested service calls and rollback points.

@diagram
Map the exception flow for validation errors from controller to @ControllerAdvice handlers and the final HTTP responses.

@diagram
Visualize @Cacheable/@CacheEvict usage in ProductService: show cache hits/misses and when Redis is accessed vs. repository queries run.

@diagram
Show the call chain when PaymentService invokes an external gateway via Feign/WebClient, including request/response, retries, and fallbacks.

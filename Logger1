package com.example.rewrite;

import org.openrewrite.ExecutionContext;
import org.openrewrite.Recipe;
import org.openrewrite.java.JavaVisitor;
import org.openrewrite.java.tree.J;
import org.openrewrite.java.tree.JavaType;

public class RenameLoggerFieldRecipe extends Recipe {

    @Override
    public String getDisplayName() {
        return "Rename logger field to LOGGER";
    }

    @Override
    public String getDescription() {
        return "Renames any field named 'logger' (regardless of type) to 'LOGGER' and updates its references.";
    }

    @Override
    public JavaVisitor<ExecutionContext> getVisitor() {
        return new JavaVisitor<ExecutionContext>() {
            private JavaType.Variable loggerFieldType;

            @Override
            public J.VariableDeclarations.NamedVariable visitVariable(J.VariableDeclarations.NamedVariable variable, ExecutionContext ctx) {
                J.VariableDeclarations.NamedVariable v = (J.VariableDeclarations.NamedVariable) super.visitVariable(variable, ctx);

                if (v.getSimpleName().equals("logger")) {
                    loggerFieldType = v.getVariableType(); // ✅ capture the field's symbol
                    return v.withName(v.getName().withSimpleName("LOGGER"));
                }
                return v;
            }

            @Override
            public J.Identifier visitIdentifier(J.Identifier ident, ExecutionContext ctx) {
                J.Identifier i = (J.Identifier) super.visitIdentifier(ident, ctx);

                // ✅ only rename identifiers that refer to the same field
                if ("logger".equals(i.getSimpleName())
                        && i.getFieldType() != null
                        && i.getFieldType().equals(loggerFieldType)) {
                    return i.withSimpleName("LOGGER");
                }
                return i;
            }
        };
    }
}
